prediction<-predict(delayclassifier,Testing3)
table(prediction,Testing3$delay)
48/(74+48+500)
set.seed(1234)
random<-sample(x=c("Training3","Testing3"),size=nrow(delay),replace=T,prob = c(0.6,0.4))
random
Training3<-delay[random=="Training3",]
Testing3<-delay[random=="Testing3",]
library(e1071)
delayclassifier<-naiveBayes(Training3,Training3$delay)
prediction<-predict(delayclassifier,Testing3)
table(prediction,Testing3$delay)
66/(98+66+690)
66/(66+690)
66/(66+690)
690/(66+690)
library(e1071)
delayclassifier<-naiveBayes(Training3,Training3$delay,laplace=1)
prediction<-predict(delayclassifier,Testing3)
table(prediction,Testing3$delay)
56/(56+690)
56/(56+690)
credit<-read.csv(file.choose())
View(credit)
credit1<-credit[,c(3,6,9)]
View(credit1)
new<-scale(credit1)
View(new)
lastfm<-read.csv(file.choose())
View(lastfm)
lastfm$user<-factor(lastfm$user)
levels(lastfm$user)
levels(lastfm$artist)
library(arules)
playlist<-split(x=lastfm[,"artist"],f=lastfm$user)
playlist
playlist[1:2]
playlist<-lapply(playlist,unique)
playlist<-as(playlist,"transactions")
itemFrequency(playlist)
itemFrequencyPlot(playlist)
playlist<-lapply(playlist,unique)
playlist
playlist[1:2]
lastfm<-read.csv(file.choose())
lastfm$user<-factor(lastfm$user)
levels(lastfm$user)
levels(lastfm$artist)
library(arules)
playlist<-split(x=lastfm[,"artist"],f=lastfm$user)
playlist
playlist[1:2]
playlist<-lapply(playlist,unique)
lastfm<-read.csv(file.choose())
itemFrequency(playlist)
library(arules)
playlist<-as(playlist,"transactions")
itemFrequency(playlist)
itemFrequencyPlot(playlist)
musicrules <- apriori(playlist,parameter=list(support=.01,confidence=.5))
inspect(musicrules)
inspect(subset(musicrules, subset=lift > 5))
inspect(sort(subset(musicrules,subset=lift>5),by="confidence"))
library(arules)
data("AdultUCI")
str(AdultUCI)
dim(AdultUCI)
AdultUCI[["fnlwgt"]] <- NULL
AdultUCI[["education-num"]] <- NULL
AdultUCI[["age"]] <- ordered(cut(AdultUCI[["age"]], c(15, 25, 45, 65, 100)), labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI$age
AdultUCI$`hours-per-week`
factor(AdultUCI$`hours-per-week)
factor(AdultUCI$`hours-per-week)
factor(AdultUCI$hours-per-week)
levels(AdultUCI$`hours-per-week)
AdultUCI[["hours-per-week"]] <- ordered(cut(AdultUCI[["hours-per-week"]], c(0, 25, 40, 60, 168)), labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI$hours-per-week
AdultUCI$'hours-per-week'
AdultUCI$hours-per-week
library(lattice)
don<-read.csv(file.choose())
View(don)
don[1:5,]
table(don$Class.Year)
barchart(table(don$Class.Year))
barchart(table(don$Class.Year),horizontal = FALSE)
don$TGiving=don$FY00Giving+don$FY01Giving+don$FY02Giving+don$FY03Giving+don$FY04Giving
mean(don$TGiving)
sd(don$TGiving)
quantile(don$TGiving,probs=seq(0,1,0.05))
quantile(don$TGiving,probs=seq(0.95,1,0.01))
hist(don$TGiving)
hist(don$TGiving[don$TGiving!=0][don$TGiving[don$TGiving!=0]<=1000])
quantile(don$TGiving,probs=seq(0,1,0.05))
quantile(don$TGiving,probs=seq(0.95,1,0.01))
hist(don$TGiving)
hist(don$TGiving[don$TGiving!=0][don$TGiving[don$TGiving!=0]<=1000])
boxplot(don$TGiving,horizontal=TRUE,xlab="Total Contribution")
boxplot(don$TGiving,outline=FALSE,horizontal=TRUE,xlab="Total Contribution")
boxplot(don$TGiving,horizontal=TRUE,xlab="Total Contribution")
boxplot(don$TGiving,outline=FALSE,horizontal=TRUE,xlab="Total Contribution")
ddd=don[don$TGiving>=30000,]
ddd
ddd1=ddd[,c(1:5,12)]
ddd1
ddd1[order(ddd1$TGiving,decreasing=TRUE),]
boxplot(TGiving~Class.Year,data=don,outline=FALSE)
boxplot(TGiving~Gender,data=don,outline=FALSE)
boxplot(TGiving~Marital.Status,data=don,outline=FALSE)
boxplot(TGiving~AttendenceEvent,data=don,outline=FALSE)
t4=tapply(don$TGiving,don$Major,mean,na.rm=TRUE)
t4
t5=table(don$Major)
t5
t6=cbind(t4,t5)
t6
t7=t6[t6[,2]>10,]
t7
t7[order(t7[,1],decreasing=TRUE),]
barchart(t7[,1],col="black")
t4=tapply(don$TGiving,don$Next.Degree,mean,na.rm=TRUE)
t4
t5=table(don$Next.Degree)
t5
t6=cbind(t4,t5)
t6
t7=t6[t6[,2]>10,]
t7[order(t7[,1],decreasing=TRUE),]
barchart(t7[,1],col="black")
densityplot(~TGiving|factor(Class.Year),data=don[don$TGiving<=1000,][don[don$TGiving<=1000,]$TGiving>0,],plot.points=FALSE,col="black")
t11=tapply(don$TGiving,don$Class.Year,FUN=sum,na.rm=TRUE)
t11
barplot(t11,ylab="Average Donation")
barchart(tapply(don$FY04Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY03Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY02Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY01Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY00Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)-1
don$TGivingIND
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)
don$TGivingIND
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)-1
don$TGivingIND
mean(don$TGivingIND)
t5=table(don$TGivingIND,don$Class.Year)
t5
barplot(t5,beside=TRUE)
mosaicplot(factor(don$Class.Year)~factor(don$TGivingIND))
t50=tapply(don$TGivingIND,don$Class.Year,FUN=mean,na.rm=TRUE)
t50
barchart(t50,horizontal=FALSE,col="black")
library(lattice)
don<-read.csv(file.choose())
View(don)
don[1:5,]
table(don$Class.Year)
barchart(table(don$Class.Year),horizontal = FALSE)
don$TGiving=don$FY00Giving+don$FY01Giving+don$FY02Giving+don$FY03Giving+don$FY04Giving
mean(don$TGiving)
sd(don$TGiving)
quantile(don$TGiving,probs=seq(0,1,0.05))
quantile(don$TGiving,probs=seq(0.95,1,0.01))
hist(don$TGiving)
hist(don$TGiving[don$TGiving!=0][don$TGiving[don$TGiving!=0]<=1000])
boxplot(don$TGiving,horizontal=TRUE,xlab="Total Contribution")
boxplot(don$TGiving,outline=FALSE,horizontal=TRUE,xlab="Total Contribution")
ddd=don[don$TGiving>=30000,]
ddd
ddd1=ddd[,c(1:5,12)]
ddd1
ddd1[order(ddd1$TGiving,decreasing=TRUE),]
boxplot(TGiving~Class.Year,data=don,outline=FALSE)
boxplot(TGiving~Gender,data=don,outline=FALSE)
boxplot(TGiving~Marital.Status,data=don,outline=FALSE)
boxplot(TGiving~AttendenceEvent,data=don,outline=FALSE)
t4=tapply(don$TGiving,don$Major,mean,na.rm=TRUE)
t4
t5=table(don$Major)
t5
t6=cbind(t4,t5)
t6
t7=t6[t6[,2]>10,]
t7
t7[order(t7[,1],decreasing=TRUE),]
barchart(t7[,1],col="black")
t4=tapply(don$TGiving,don$Next.Degree,mean,na.rm=TRUE)
t4
t5=table(don$Next.Degree)
t5
t6=cbind(t4,t5)
t6
t7=t6[t6[,2]>10,]
t7[order(t7[,1],decreasing=TRUE),]
barchart(t7[,1],col="black")
densityplot(~TGiving|factor(Class.Year),data=don[don$TGiving<=1000,][don[don$TGiving<=1000,]$TGiving>0,],plot.points=FALSE,col="black")
t11=tapply(don$TGiving,don$Class.Year,FUN=sum,na.rm=TRUE)
t11
barplot(t11,ylab="Average Donation")
barchart(tapply(don$FY04Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal=FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY03Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY02Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY01Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
barchart(tapply(don$FY00Giving,don$Class.Year,FUN=sum,na.rm=TRUE),horizontal= FALSE,ylim=c(0,225000),col="black")
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)-1
don$TGivingIND
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)
don$TGivingIND
don$TGivingIND=cut(don$TGiving,labels=FALSE)
don$TGivingIND=cut(don$TGiving,c(-1,0.5,1000000)labels=FALSE)
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000)labels=FALSE)
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)
don$TGivingIND
don$TGivingIND=cut(don$TGiving,c(-1,0.5,10000000),labels=FALSE)-1
don$TGivingIND
mean(don$TGivingIND)
t5=table(don$TGivingIND,don$Class.Year)
t5
barplot(t5,beside=TRUE)
mosaicplot(factor(don$Class.Year)~factor(don$TGivingIND))
t50=tapply(don$TGivingIND,don$Class.Year,FUN=mean,na.rm=TRUE)
t50
barchart(t50,horizontal=FALSE,col="black")
t5=table(don$TGivingIND,don$Class.Year)
t5=table(don$TGivingIND,don$Class.Year)
t5
barplot(t5,beside=TRUE)
mosaicplot(factor(don$Class.Year)~factor(don$TGivingIND))
t50=tapply(don$TGivingIND,don$Class.Year,FUN=mean,na.rm=TRUE)
t50
barchart(t50,horizontal=FALSE,col="black")
mosaicplot(factor(don$Class.Year)~factor(don$TGivingIND))
t50=tapply(don$TGivingIND,don$Class.Year,FUN=mean,na.rm=TRUE)
t50
barchart(t50,horizontal=FALSE)
Data=data.frame(don$FY04Giving,don$FY03Giving,don$FY02Giving,don$FY01Giving,don$FY00Giving)
correlation=cor(Data)
correlation
plot(Data)
library(ellipse)
plotcorr(correlation)
mosaicplot(factor(don$Gender)~factor(don$TGivingIND))
mosaicplot(factor(don$Marital.Status)~factor(don$TGivingIND))
t2=table(factor(don$Marital.Status),factor(don$TGivingIND))
mosaicplot(t2)
mosaicplot(factor(don$AttendenceEvent)~factor(don$TGivingIND))
adm<-read.csv(file.choose())
View(adm)
plot(adm$GPA,adm$GMAT,adm$De)
plot(adm$GPA,adm$GMAT,col=adm$De)
m1=lda(De~.,adm)
library(MASS)
m1=lda(De~.,adm)
predict(m1,newdata=data.frame(GPA=3.21,GMAT=497))
predict(m1,newdata=data.frame(GPA=2.89,GMAT=358))
predict(m1,newdata=data.frame(GPA=3.17,GMAT=310))
predict(m1,newdata=data.frame(GPA=2.58,GMAT=358))
predict(m1,newdata=data.frame(GPA=3.89,GMAT=358))
m2=QDA(De~.,adm)
plot(m1)
plot(m1,type="all")
plot(m1,type="both")
table(m1,adm$De)
table(m1,adm)
table(m1,adm$De)
library(MASS)
m2=QDA(De~.,adm)
m2=qda(De~.,adm)
m2
predict(m2,newdata=data.frame(GPA=3.21,GMAT=497))
m1=lda(De~.,adm)
m1
predict(m2,newdata=data.frame(GPA=3.21,GMAT=497))
predict(m2,newdata=data.frame(GPA=3.21,GMAT=497))
plot(m2)
m2=qda(De~.,adm)
m2
plot(m2)
plot(m1)
m2
plot(m2)
plot(De,m2)
plot(adm$De,m2)
n=85
nt=60
neval=n-nt
rep=100
errlin=dim(rep)
for (k in 1:rep) {
train=sample(1:n,nt)
## linear discriminant analysis
m1=lda(De~.,adm[train,])
predict(m1,adm[-train,])$class
tablin=table(adm$De[-train],predict(m1,adm[-train,])$class)
errlin[k]=(neval-sum(diag(tablin)))/neval
}
merrlin=mean(errlin)
merrlin
predict(m2,newdata=data.frame(GPA=3.21,GMAT=497))
library(MASS)
set.seed(1)
data("fgl")
View(fg1)
View("fg1")
str(fg1)
data(fg1)
library(MASS)
set.seed(1)
data(fg1)
library(MASS)
data(fg1)
data(fgl)
str(fg1)
str(fgl)
glass=data.frame(fgl)
glass
factor(glass$type)
m1=lda(type~.,glass)
m1
plot(m1)
predict(m1,newdata=data.frame(RI=3.0,Na=13,Mg=4,Al=1,Si=70,K=0.06,Ca=9,Ba=0,Fe=0))
predict(m1,newdata=data.frame(RI=3.0,Na=13,Mg=4,Al=1,Si=70,K=0.06,Ca=9,Ba=0,Fe=0))$class
m2=qda(type~.,glass)
n=length(fgl$type)
nt=200
neval=n-nt
rep=100
errlin=dim(rep)
for (k in 1:rep) {
train=sample(1:n,nt)
glass[train,]
## linear discriminant analysis
m1=lda(type~.,glass[train,])
predict(m1,glass[-train,])$class
tablin=table(glass$type[-train],predict(m1,
+ glass[-train,])$class)
errlin[k]=(neval-sum(diag(tablin)))/neval
}
merrlin=mean(errlin)
merrlin
n=214
neval=1
errlin=dim(n)
errqua=dim(n)
for (k in 1:n) {
train1=c(1:n)
train=train1[train1!=k]
## linear discriminant analysis
m1=lda(type~.,glass[train,])
predict(m1,glass[-train,])$class
tablin=table(glass$type[-train],predict(m1,glass[-train,])
+ $class)
errlin[k]=(neval-sum(diag(tablin)))/neval
}
tablin=table(glass$type[-train],predict(m1,glass[-train,])$class)
for (k in 1:n) {
train1=c(1:n)
train=train1[train1!=k]
## linear discriminant analysis
m1=lda(type~.,glass[train,])
predict(m1,glass[-train,])$class
tablin=table(glass$type[-train],predict(m1,glass[-train,])$class)
errlin[k]=(neval-sum(diag(tablin)))/neval
}
merrlin=mean(errlin)
merrlin
tablin=table(glass$type[-train],predict(m1,glass[-train,])$class)
for (k in 1:n) {
train1=c(1:n)
train=train1[train1!=k]
## linear discriminant analysis
m1=lda(type~.,glass[train,])
predict(m1,glass[-train,])$class
tablin=table(glass$type[-train],predict(m1,glass[-train,])$class)
tablin
errlin[k]=(neval-sum(diag(tablin)))/neval
}
errlin[k]=(neval-sum(diag(tablin)))/neval
for (k in 1:n) {
train1=c(1:n)
train=train1[train1!=k]
## linear discriminant analysis
m1=lda(type~.,glass[train,])
predict(m1,glass[-train,])$class
tablin=table(glass$type[-train],predict(m1,glass[-train,])$class)
print(tablin)
errlin[k]=(neval-sum(diag(tablin)))/neval
}
merrlin=mean(errlin)
merrlin
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("statnet")
install.packages("Gephi")
install.packages("Pajek")
install.packages("igraphdata")
install.packages("igraphinshiny")
library(igraph)
florence<-read.csv(file.choose())
florence
marriage<-graph.adjacency(florence,mode="undirected")
marriage<-graph.adjacency(florence,mode="undirected",diag=FALSE)
florence
marriage<-graph.adjacency(florence,mode="undirected",diag=FALSE)
marriage<-graph.adjacency(florence,mode="undirected",diag=FALSE)
raw<-read.csv(file.choose())
View(raw)
raw[1:3,]
rawt=matrix(nrows=50,ncols=416)
rawt=matrix(nrows=50,ncols=416)
rawt=t(raw)
dim(raw)
dim(raw)
rawt=t(raw)
dim(rawt)
rawt[1:3,]
library(psych)
KMO(rawt)
prin.comp<-prcomp(rawt)
summary(prin.comp)
screeplot(prin.comp,type="line")
summary(prin.comp)
set.seed(1)
grpunemp3 <- kmeans(rawt,centers=3,nstart=10)
grpunemp3
plot(unemppc[,1:2],type="n")
pcaunemp <- prcomp(rawt,scale=FALSE)
pcaunemp
plot(pcaunemp, main="")
mtext(side=1,"Unemployment: 50 states",line=1,font=2)
pcaunemp$rotation[,1]
pcaunemp$rotation[1:10,1]
ave=dim(416)
for (j in 1:416) {
ave[j]=mean(rawt[,j])
}
par(mfrow=c(1,2))
plot(-pcaunemp$rotation[,1])
plot(ave,type="l",ylim=c(3,10),xlab="month",ylab="ave
+ unemployment rate")
abs(cor(ave,pcaunemp$rotation[,1]))
pcaunemp$rotation[,1]
pcaunemp$rotation[,2]
pcaunemp$rotation[,3]
unemppc <- predict(pcaunemp)
unemppc
grpunemp3
grpunemp3 <- kmeans(rawt,centers=3,nstart=10)
grpunemp3
plot(unemppc[,1:2],type="n")
unemppc
set.seed(1)
grpunemp3 <- kmeans(rawt,centers=3,nstart=10)
grpunemp3
plot(unemppc[,1:2],type="n")
text(x=unemppc[,1],y=unemppc[,2],labels=states,col=rainbow(7)[grpunemp3$cluster])
states=c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID",
+"IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO",
+ "MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA",
+ "RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
states=c("AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
library(cluster)
grpunemp3 <- kmeans(rawt,centers=3,nstart=10)
grpunemp3
plot(unemppc[,1:2],type="n")
text(x=unemppc[,1],y=unemppc[,2],labels=states,col=rainbow(7)[grpunemp3$cluster])
contactlens<-read.csv()
contactlens<-read.csv()
contactlens<-read.csv(file.choose())
contactlens<-read.csv(file.choose())
contactlens<-read.csv(file.choose())
View(contactlens)
summary(contactlens)
library(rpart)
ctree=rpart(ContactLens~.,data=contactlens)
print(ctree$cptable)
cp=min(ctree$cptable[2,])
cp=min(ctree$cptable[2,])
prune.ctree=prune(ctree,cp=cp)
plot(as.party(ctree))
plot(as.party(ctree))
plot(as.party(ctree))
library(partykit)
plot(as.party(ctree))
plot(as.party(prune.ctree))
cltree <- tree(ContactLens ~., data = contactlens, mindev=0, minsize=1)
cltree
library(tree)
cltree <- tree(ContactLens ~., data = contactlens, mindev=0, minsize=1)
cltree
summary(cltree)
plot(cltree, col=8)
text(cltree, digits=2)
clcut <- prune.tree(cltree, best=3)
clcut
summary(clcut)
plot(clcut, col=8)
text(clcut)
plot(as.party(ctree))
plot(as.party(prune.ctree))
cltree <- tree(ContactLens ~., data = contactlens, mindev=0, minsize=1)
cltree
summary(cltree)
plot(cltree, col=8)
text(cltree, digits=2)
clcut <- prune.tree(cltree, best=3)
clcut
summary(clcut)
plot(clcut, col=8)
text(clcut)
