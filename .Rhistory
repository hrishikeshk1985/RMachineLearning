ins_model12<-lm(charges~age+age2+children+bmi+sex+bmi30*smoker+region,data=insurance)
summary(ins_model12)
concrete<-read.csv(file.choose())
str(concrete)
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
concrete_norm<-as.data.frame(lapply(concrete,normalize))
str(concrete_norm)
summary(concrete_norm$strength)
summary(concrete$strength)
concrete_train<-concrete_norm[1:773,]
concrete_train<-concrete_norm[1:773,]
concrete_test<-concrete_norm[774:1030,]
library(nueralnet)
install.packages("nueralnet")
install.packages("neuralnet")
install.packages("neural")
install.packages("NeuralNetTools")
install.packages("neurobase")
library(neuralnet)
library(neuralnet)
concrete_model <- neuralnet(strength ~ cement + slag +ash + water + superplastic +coarseagg + fineagg + age,data = concrete_train)
plot(concrete_model)
model_results<-compute(concrete_model,concrete_test[1:8])
predict_strength<-model_results$net.result
predict_strength
cor(predict_strength,concrete_test$strength)
concrete_model2 <- neuralnet(strength ~ cement + slag + ash + water + superplastic +coarseagg + fineagg + age,data = concrete_train, hidden = 5)
plot(concrete_model2)
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)
letters<-read.csv(file.choose())
str(letters)
letters_train <- letters[1:16000,]
letters_test <- letters[16001:20000, ]
library(kernlab)
letter_classifier<-ksvm(letter ~ .,data =letters_train,kernel="vanilladot")
letter_classifier
letter_predictions<-predict(letter_classifier,letters_test)
head(letter_predictions)
table(letter_predictions, letters_test$letter)
agreement<-letter_predictions==letters_test$letter
table(agreement)
prop.table(table(agreement))
letter_classifier<-ksvm(letter~.,data =letters_train,kernel="rbfdot")
letter_classifier
letter_predictions<-predict(letter_classifier,letters_test)
letters<-read.csv(file.choose())
str(letters)
letters_train <- letters[1:16000,]
letters_test <- letters[16001:20000, ]
library(kernlab)
letter_classifier<-ksvm(letter ~ .,data =letters_train,kernel="vanilladot")
letter_classifier
letter_predictions<-predict(letter_classifier,letters_test)
head(letter_predictions)
table(letter_predictions, letters_test$letter)
agreement<-letter_predictions==letters_test$letter
table(agreement)
prop.table(table(agreement))
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="rbfdot")
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="rbfdot")
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="rbfdot")
library(kernlab)
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="rbfdot")
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="tanhdot")
library(kernlab)
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="polydot")
letter_classifier1
letter_predictions<-predict(letter_classifier1,letters_test)
head(letter_predictions)
table(letter_predictions1, letters_test$letter)
letter_classifier1<-ksvm(letter~.,data =letters_train,kernel="polydot")
letter_classifier1
letter_classifier1
letter_predictions1<-predict(letter_classifier1,letters_test)
head(letter_predictions1)
table(letter_predictions1, letters_test$letter)
agreement1<-letter_predictions1==letters_test$letter
table(agreement1)
prop.table(table(agreement1))
sns<-read.table(file.choose())
View(sns)
sns<-read.table(file.choose(),sep=",")
View(sns)
sns<-read.table(file.choose(),sep=",",header=TRUE)
View(sns)
teens<-read.table(file.choose(),sep=",",header=TRUE)
View(teens)
str(teens)
View(teens)
table(teens$gender,useNA="ifany")
summary(teens$age)
max(teens$age)
teens$age<-ifelse(teens$age>=13 & teens$age<20,teens$age,NA)
summary(teens$age)
teens$female <- ifelse(teens$gender == "F"&!is.na(teens$gender), 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
View(teens)
teens$female<-ifelse(teens$gender == "F"&!is.na(teens$gender),1,0)
teens$no_gender<-ifelse(is.na(teens$gender), 1, 0)
View(teens)
table(teens$gender,useNA="ifany")
table(teens$female,useNA="ifany")
table(teens$no_)
table(teens$no_gender,useNA="ifany")
teens$female<-ifelse(teens$gender == "F"&!is.na(teens$gender),1,0)
teens$no_gender<-ifelse(is.na(teens$gender), 1, 0)
View(teens)
table(teens$gender,useNA="ifany")
table(teens$female,useNA="ifany")
table(teens$no_gender,useNA="ifany")
mean(teens$age)
mean(teens$age,na.rm=TRUE)
aggregate(data=teens,age~gradyear,mean,na.rm=TRUE)
ave_age <- ave(teens$age, teens$gradyear, FUN =function(x) mean(x, na.rm = TRUE))
avg_age
ave_age
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
teens$age
summary(teens$age)
library(stats)
interests<-teens[,5:40]
interests<-teens[5:40]
interests
interests_z <- as.data.frame(lapply(interests, scale))
teen_clusters <- kmeans(interests_z,5)
teen_clusters$size
teen_clusters$centers
teens$cluster<-teen_clusters$cluster
teens[1:5,c("cluster", "gender", "age", "friends")]
aggregate(data = teens, age ~ cluster, mean)
aggregate(data = teens, female ~ cluster, mean)
aggregate(data = teens, friends ~ cluster, mean)
wbcd<-read.table(file.choose(),sep=",",header=TRUE)
View(wbcd)
str(wbcd)
wbcd<-wbcd[-1]
str(wbcd)
table(wbcd$diagnosis)
wbcd$diagnosis<-factor(wbcd$diagnosis,levels=c("B","M"),labels=c("Benign","Malignant"))
str(wbcd)
round(prop.table(wbcd$diagnosis)*100,digits=1)
(prop.table(wbcd$diagnosis)
prop.table(wbcd$diagnosis)
prop.table(wbcd$diagnosis)
wbcd<-read.table(file.choose(),sep=",",header=TRUE)
str(wbcd)
table(wbcd$diagnosis)
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
wbcd_n<-as.data.frame(lapply(wbcd[2:31],normalize))
wbcd_n
summary(wbcd_n)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[469:570,]
library(class)
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
wbcd_test<-wbcd_n[469:569,]
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[469:570,]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[469:570, 1]
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train, k=21)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[469:570,]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[469:570,]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[469:570, 1]
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
wbcd_train<-wbcd_n[1:469,]
wbcd_test<-wbcd_n[469:569,]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[469:569, 1]
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
table(wbcd_test_labels,wbcd_test_pred)
wbcd_z<-as.data.frame(scale(wbcd[-1]))
wbcd_z<-as.data.frame(scale(wbcd[-1]))
wbcd_train<-wbcd_z[1:469, ]
wbcd_test<-wbcd_z[470:569, ]
wbcd_train_labels<-wbcd[1:469, 1]
wbcd_test_labels<-wbcd[470:569, 1]
wbcd_test_pred<-knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
table(wbcd_test_labels,wbcd_test_pred)
wbcd_z<-as.data.frame(scale(wbcd[-1]))
wbcd_train1<-wbcd_z[1:469, ]
wbcd_test1<-wbcd_z[470:569, ]
wbcd_train_labels1<-wbcd[1:469, 1]
wbcd_test_labels1<-wbcd[470:569, 1]
wbcd_test_pred1<-knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
table(wbcd_test_labels1,wbcd_test_pred1)
wbcd_z<-as.data.frame(scale(wbcd[-1]))
wbcd_train1<-wbcd_z[1:469, ]
wbcd_test1<-wbcd_z[470:569, ]
wbcd_train_labels1<-wbcd[1:469, 1]
wbcd_test_labels1<-wbcd[470:569, 1]
wbcd_test_pred1<-knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels1, k=21)
table(wbcd_test_labels1,wbcd_test_pred1)
library(vcdExtra)
data(ICU)
str(ICU)
summary(ICU)
View(ICU)
ICU2=ICU[-4]
ICU2
ICU2$age = cut(ICU2$age,breaks =4)
ICU2$age
ICU2$systolic = cut(ICU2$systolic,breaks=4)
ICU2$systolic
ICU2$hrtrate = cut(ICU2$hrtrate, breaks = 4)
ICU2$hrtrate
ICU_tr = as(ICU2, "transactions")
ICU_tr
rules = apriori (ICU_tr,parameter = list(support = .85, confidence = .95))
inspect(rules)
IM=interestMeasure(rules,"FishersExactTest",ICU_tr)
round(IM,2)
rulesDeath=apriori(ICU_tr,parameter = list(confidence = 0.3,support=.1),appearance = list(rhs = c("died=Yes"), default="lhs"))
inspect(rulesDeath)
rulesDeath.df = as(rulesDeath,"data.frame")
rulesDeath.df.sorted =rulesDeath.df[order(rulesDeath.df$lift,decreasing = T),]
rulesDeath.df.sorted =rulesDeath.df[order(rulesDeath.df$lift,decreasing = T),]
head(rulesDeath.df.sorted)
library(arulesViz)
> plot(rulesDeath.df.sorted, method="paracoord", control=list(reorder=TRUE))
plot(rulesDeath.df.sorted, method="paracoord", control=list(reorder=TRUE))
plot(rules,method="paracoord", control=list(reorder=TRUE))
plot(rulesDeath,method="paracoord", control=list(reorder=TRUE))
groceries<-read.csv(file.choose())
groceries
gro=as(groceries,"transactions")
summary(gro)
dt <- split(mydata$Products)
groceries<-read.csv(file.choose())
dt <- split(groceries$Products)
groceries<-read.csv(file.choose())
library(arules)
gro=as(groceries,"transactions")
gro
factor(gro)
groceries<-read.csv(file.choose())
library(arules)
factor(gro)
library(arulesViz)
data("Groceries")
Groceries
data("Groceries")
Groceries
it
Gro=as(Groceries,"transactions")
itemFrequencyPlot(Gro,topN=10,type="absolute")
rules=apr
rules=apr
rules=apriori(Gro,parameter=list(support=0.001,confidence=0.9,maxlen=4))
inspect(rules)
ruleswmilk=apriori(Gro,parameter=list(support=0.001,confidence=0.9),appearance = list(rhs=c("whole milk",default="lhs")))
ruleswmilk=apriori(Gro,parameter=list(support=0.001,confidence=0.9),appearance = list(rhs=c("whole milk",default="lhs")))
ruleswmilk=apriori(Gro,parameter=list(support=0.001,confidence=0.9),appearance = list(rhs=c("whole milk")))
inspect(ruleswmilk)
rules=apriori(Gro,parameter=list(support=0.001,confidence=0.9,maxlen=2))
rules=apriori(Gro,parameter=list(support=0.001,confidence=0.9,maxlen=3))
inspect(rules)
ruleswmilk=apriori(Gro,parameter=list(support=0.001,confidence=0.9),appearance = list(rhs=c("whole milk")))
inspect(ruleswmilk)
rules=apriori(Gro,parameter=list(support=0.001,confidence=0.9,maxlen=4))
ruleswmilk.df = as(ruleswmilk,"data.frame")
ruleswmilk.df.sorted =ruleswmilk.df[order(ruleswmilk.df$lift,decreasing = T),]
head(ruleswmilk.df.sorted)
itemFrequencyPlot(Gro,topN=10,type="absolute")
rules=apriori(Gro,parameter=list(support=0.001,confidence=0.3,maxlen=4))
rules=apriori(Gro,parameter=list(support=0.001,confidence=0.9,maxlen=4))
inspect(rules)
ruleswmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.3),appearance = list(rhs=c("whole milk")))
inspect(ruleswmilk)
ruleswmilk.df = as(ruleswmilk,"data.frame")
ruleswmilk.df.sorted =ruleswmilk.df[order(ruleswmilk.df$lift,decreasing = T),]
head(ruleswmilk.df.sorted)
ruleswmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.3),appearance = list(r,rhs=c("whole milk"),default="lhs"))
ruleswmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.3),appearance = list(rhs=c("whole milk"),default="lhs"))
inspect(ruleswmilk)
ruleswmilk.df = as(ruleswmilk,"data.frame")
ruleswmilk.df.sorted =ruleswmilk.df[order(ruleswmilk.df$lift,decreasing = T),]
head(ruleswmilk.df.sorted)
ruleslwmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.3),appearance = list(lhs=c("whole milk"),default="rhs"))
inspect(ruleslwmilk)
ruleslwmilk.df = as(ruleslwmilk,"data.frame")
ruleslwmilk.df.sorted =ruleslwmilk.df[order(ruleslwmilk.df$lift,decreasing = T),]
head(ruleslwmilk.df.sorted)
ruleswmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.9),appearance = list(rhs=c("whole milk"),default="lhs"))
inspect(ruleswmilk)
ruleswmilk.df = as(ruleswmilk,"data.frame")
ruleswmilk.df.sorted =ruleswmilk.df[order(ruleswmilk.df$lift,decreasing = T),]
head(ruleswmilk.df.sorted)
ruleslwmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.9),appearance = list(lhs=c("whole milk"),default="rhs"))
library(arulesViz)
plot(ruleswmilk, method="paracoord", control=list(reorder=TRUE))
itemFrequencyPlot(Gro,topN=10,type="absolute")
ruleswmilk=apriori(Gro,parameter=list(support=0.0015,confidence=0.9),appearance = list(rhs=c("whole milk"),default="lhs"))
inspect(ruleswmilk)
housing<-read.csv(file.choose())
View(housing)
nrows(housing)
nrow(housing)
is.na(housing)
housing<-read.csv(file.choose())
View(housing)
missing<-is.na(housing)
sum(missing)
housing1<-na.omit(housing)
nrow(housing1)
housing<-read.csv(file.choose())
View(housing)
missing<-is.na(housing$Builtup)
sum(missing)
housing1<-na.omit(housing)
nrow(housing1)
View(housing)
housing<-read.csv(file.choose(),na.rm=TRUE)
housing<-read.csv(file.choose())
View(housing)
missing<-is.na(housing$Builtup)
sum(missing)
housing1<-na.omit(housing)
nrow(housing1)
View(housing1)
housing2<-housing[,-1]
View(housing2)
factor(housing2$Parking)
missing<-is.na(housing$Builtup)
sum(missing)
housing1<-na.omit(housing)
nrow(housing1)
View(housing1)
housing2<-housing1[,-1]
View(housing2)
factor(housing2$Parking)
table(housing2$Parking)
factor(housing2$City_Category)
table(housing2$City_Category)
levels(housing2$Parking)<-c("Open","No Parking","No parking","Open")
levels(housing2$Parking)
housing<-read.csv(file.choose())
missing<-is.na(housing$Builtup)
sum(missing)
housing1<-na.omit(housing)
nrow(housing1)
housing2<-housing1[,-1]
factor(housing2$Parking)
table(housing2$Parking)
factor(housing2$City_Category)
table(housing2$City_Category)
levels(housing2$Parking)<-c("Covered","No Parking","No parking","Open")
levels(housing2$Parking)
table(housing2$Parking)
housing2<-housing1[,-1]
housing<-read.csv(file.choose())
missing<-is.na(housing$Builtup)
housing1<-na.omit(housing)
nrow(housing1)
housing2<-housing1[,-1]
factor(housing2$Parking)
table(housing2$Parking)
factor(housing2$City_Category)
table(housing2$City_Category)
levels(housing2$Parking)<-c("Covered","No Parking","No Parking","Open")
levels(housing2$Parking)
table(housing2$Parking)
View(housing2)
library(plyr)
housing2$Parking<-mapvalues(housing$Parking,from=c("Covered","No Parking","Open"),to=c(1,2,3))
library(plyr)
housing2$Parking<-mapvalues(housing2$Parking,from=c("Covered","No Parking","Open"),to=c(1,2,3))
View(housing2)
housing2$City_Category<-mapvalues(housing2$City_Category,from=c("CAT A","CAT B","CAT C"),to=c(1,2,3))
View(housing2)
set.seed(1234)
set.seed(1234)
random<-sample(x=c("Training2","Testing2"),size=nrow(housing2),replace=T,prob = c(0.7,0.3))
random
Training1<-housing2[random=="Training2",]
set.seed(1234)
random<-sample(x=c("Training2","Testing2"),size=nrow(housing2),replace=T,prob = c(0.7,0.3))
random
Training2<-housing2[random=="Training2",]
View(Training1)
fit=lm(House_price~.,data=Training2)
fit=lm(House_Price~.,data=Training2)
summary(fit)
best.fit=lm(House_Price~Carpet+Parking+City_Category,data=Training2)
summary(best.fit)
Training_model_1<-step(object=Training2,direction="both")
Training_model_1<-step(object=fit,direction="both")
summary(Training_model_1)
library(car)
vif(Training_model_1) # no presence of multicollinerity
durbin.watson(Training_model_1) # no autocorrelation (error terms are independent rho=0)
qqnorm(Training_model_1$residuals)
qqline(Training_model_1$residuals)
shapiro.test(Training_model_1$residuals) # errors are not normal
par(mfrow=c(2,2))
plot(Training_model_1)
Test_predict<-predict.lm(object=Training_model_1,newdata=Testing2)
Testing2<-housing2[random=="Testing2",]
Test_predict<-predict.lm(object=Training_model_1,newdata=Testing2)
summary(Test_predict)
cor(x=Test_predict,y=Testing2$House_Price)
cor(x=Test_predict,y=Testing2$House_Price)
flights<-read.csv(file.choose())
View(flights)
factor(flights$schedtime)
factor(flights$delay)
library(plyr)
flights$delay<-mapvalues(flights$delay,from=c("delayed","ontime"),to=c(1,0))
View(flights)
factor(flights$schedtime)
factor(housing2$Parking)
housing<-read.csv(file.choose())
View(housing)
missing<-is.na(housing$Builtup)
sum(missing)
housing1<-na.omit(housing)
nrow(housing1)
View(housing1)
housing2<-housing1[,-1]
View(housing2)
factor(housing2$Parking)
table(housing2$Parking)
factor(housing2$City_Category)
table(housing2$City_Category)
levels(housing2$Parking)<-c("Covered","No Parking","No Parking","Open")
levels(housing2$Parking)
table(housing2$Parking)
View(housing2)
library(plyr)
housing2$Parking<-mapvalues(housing2$Parking,from=c("Covered","No Parking","Open"),to=c(1,2,3))
View(housing2)
housing2$City_Category<-mapvalues(housing2$City_Category,from=c("CAT A","CAT B","CAT C"),to=c(1,2,3))
View(housing2)
set.seed(1234)
random<-sample(x=c("Training2","Testing2"),size=nrow(housing2),replace=T,prob = c(0.7,0.3))
random
Training2<-housing2[random=="Training2",]
View(Training1)
Testing2<-housing2[random=="Testing2",]
random<-sample(x=c("Training2","Testing2"),size=nrow(housing2),replace=T,prob = c(0.7,0.3))
random
Training2<-housing2[random=="Training2",]
Testing2<-housing2[random=="Testing2",]
prin.comp1<-prcomp(Training2)
View(housing2)
set.seed(1234)
random<-sample(x=c("Training2","Testing2"),size=nrow(housing2),replace=T,prob = c(0.7,0.3))
random
Training2<-housing2[random=="Training2",]
Testing2<-housing2[random=="Testing2",]
prin.comp1<-prcomp(Training2)
View(Training2)
Training3<-Training2[,c(-6,-7,-9)]
View(Training3)
prin.comp1<-prcomp(Training3)
summary(prin.comp1)
screeplot(prin.comp1,type="line")
library(psych)
fact.analysis_2i<-factanal(x=Training3,factors=2,scores="Bartlett",rotation="varimax")
fact.analysis_2i
reg<-lm(Training2$House_Price~fact.analysis_2i$scores)
summary(reg)
Clean_data<-read.csv(file.choose())
numeric<-c("Dist_Taxi", "Dist_Market", "Dist_Hospital", "Carpet","Builtup", "Rainfall")
categoric <- c("Parking", "City_Category")
Target<-c("House_Price")
set.seed(42)
train <-sample(nrow(Clean_Data), 0.7*nrow(Clean_Data))
test<-setdiff(seq_len(nrow(Clean_Data)), train)
train <-sample(nrow(Clean_data), 0.7*nrow(Clean_data))
test<-setdiff(seq_len(nrow(Clean_data)), train)
require(FactoMineR)
Data_for_PCA<-Clean_data[,numeric]
pca1<-PCA(Data_for_PCA)
PCA_data<-as.data.frame(cbind(Clean_Data[train,c(Target,categoric)],pca1$ind$coord[train,]))
PCA_data<-as.data.frame(cbind(Clean_data[train,c(Target,categoric)],pca1$ind$coord[train,]))
Step_PCA_Reg<-step(lm(House_Price~.,data = PCA_data))
PCA_Estimate <- predict(Step_PCA_Reg, type="response", newdata=cbind(Clean_data[test,c(Target,categoric)],pca1$ind$coord[test,]))
format(cor(PCA_Estimate, Observed$House_Price)^2, digits=4)
Observed <- subset(Clean_data[test,c(numeric,categoric,Target)],select = Target)
Clean_data
format(cor(PCA_Estimate, Observed$House_Price)^2, digits=4)
PCA_Estimate <- predict(Step_PCA_Reg, type="response", newdata=cbind(Clean_data[test,c(Target,categoric)],pca1$ind$coord[test,]))
Observed <- subset(Clean_data[test,c(numeric,categoric,Target)],select = Target)
format(cor(PCA_Estimate, Observed$House_Price)^2, digits=4)
Org_Reg<-lm(House_Price~.,data = Clean_Data[train,c(Target,numeric,categoric)])
summary(Org_Reg)
Org_Reg<-lm(House_Price~.,data = Clean_data[train,c(Target,numeric,categoric)])
summary(Org_Reg)
Estimate <- predict(Org_Reg, type="response", newdata=Clean_data[test, c(numeric,categoric,Target)])
Observed <- subset(Clean_data[test,c(numeric,categoric,Target)],select = Target)
format(cor(Estimate, Observed$House_Price)^2, digits=4)
